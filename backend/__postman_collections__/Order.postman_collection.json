{
	"info": {
		"_postman_id": "54c66f4b-03b4-495c-839f-d9c3e50465a4",
		"name": "Order",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26508684"
	},
	"item": [
		{
			"name": "Create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for a successful registration\r",
							"pm.test(\"Status code is 201 created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"total\");\r",
							"    pm.response.to.have.jsonBody(\"tableId\");\r",
							"    pm.response.to.have.jsonBody(\"userId\");\r",
							"    pm.response.to.have.jsonBody(\"clientId\");\r",
							"    pm.response.to.have.jsonBody(\"delivery\");\r",
							"    pm.response.to.have.jsonBody(\"note\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"});\r",
							"\r",
							"// Test for order not found\r",
							"pm.test(\"Status code is 404 order Not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"total\": 100,\r\n  \"tableId\": 1,\r\n  \"clientId\": 1,\r\n  \"products\": [\r\n    {\"id\": 1, \"quantity\": 2},\r\n    {\"id\": 2, \"quantity\": 1}\r\n  ],\r\n  \"delivery\": false,\r\n  \"note\": \"Test instructions\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/orders"
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains order details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"orders\");\r",
							"    pm.response.to.have.jsonBody(\"page\");\r",
							"    pm.response.to.have.jsonBody(\"pages\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/orders?pageNumber&keyword",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"orders"
					],
					"query": [
						{
							"key": "pageNumber",
							"value": null
						},
						{
							"key": "keyword",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"total\");\r",
							"    pm.response.to.have.jsonBody(\"isPaid\");\r",
							"    pm.response.to.have.jsonBody(\"delivery\");\r",
							"    pm.response.to.have.jsonBody(\"note\");\r",
							"    pm.response.to.have.jsonBody(\"userId\");\r",
							"    pm.response.to.have.jsonBody(\"clientId\");\r",
							"    pm.response.to.have.jsonBody(\"tableId\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"    pm.response.to.have.jsonBody(\"client\");\r",
							"    pm.response.to.have.jsonBody(\"table\");\r",
							"    pm.response.to.have.jsonBody(\"user\");\r",
							"    pm.response.to.have.jsonBody(\"products\");\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 order not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/orders/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"total\");\r",
							"    pm.response.to.have.jsonBody(\"isPaid\");\r",
							"    pm.response.to.have.jsonBody(\"delivery\");\r",
							"    pm.response.to.have.jsonBody(\"note\");\r",
							"    pm.response.to.have.jsonBody(\"userId\");\r",
							"    pm.response.to.have.jsonBody(\"clientId\");\r",
							"    pm.response.to.have.jsonBody(\"tableId\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"    pm.response.to.have.jsonBody(\"client\");\r",
							"    pm.response.to.have.jsonBody(\"table\");\r",
							"    pm.response.to.have.jsonBody(\"user\");\r",
							"    pm.response.to.have.jsonBody(\"products\");\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 order not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"total\": 20,\r\n  \"clientId\": 2,\r\n  \"tableId\": 3,\r\n  \"delivery\": false,\r\n  \"products\": [\r\n    {\"id\": 1, \"quantity\": 1},\r\n    {\"id\": 3, \"quantity\": 3}\r\n  ],\r\n  \"note\": \"Updated instructions\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/orders/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 order not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/orders/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		}
	]
}