{
	"info": {
		"_postman_id": "56ac5cf5-f9ff-4d50-bb7b-11324f33e3cd",
		"name": "Table",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26508684"
	},
	"item": [
		{
			"name": "Create table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for a successful registration\r",
							"pm.test(\"Status code is 201 Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains table details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"});\r",
							"\r",
							"// Test for table not found\r",
							"pm.test(\"Status code is 404 table Not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test table 1\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/tables"
			},
			"response": []
		},
		{
			"name": "Get all tables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"tables\");\r",
							"    pm.response.to.have.jsonBody(\"page\");\r",
							"    pm.response.to.have.jsonBody(\"pages\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/tables?pageNumber&keyword",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"tables"
					],
					"query": [
						{
							"key": "pageNumber",
							"value": null
						},
						{
							"key": "keyword",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get table by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"    pm.response.to.have.jsonBody(\"occupied\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 table not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/tables/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"tables",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update table by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for checking if the response contains product details\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"    pm.response.to.have.jsonBody(\"occupied\");\r",
							"    pm.response.to.have.jsonBody(\"createdAt\");\r",
							"    pm.response.to.have.jsonBody(\"updatedAt\");\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 table not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Updated Table Name\",\r\n  \"occupied\": true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/tables/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"tables",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for success\r",
							"pm.test(\"Status code is 200 Success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for invalid id\r",
							"pm.test(\"Status code is 404 table not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/tables/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"tables",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "9"
						}
					]
				}
			},
			"response": []
		}
	]
}